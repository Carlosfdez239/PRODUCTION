[
    {
        "cfg_id": "0", 
        "cfg_parameters": {
            "baudrate": 115200, 
            "databits": 8, 
            "global_instructions": "0041F4058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 31, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 2000, 
            "word_swap": false
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "A-Axis", 
                "signed_value": true, 
                "unit": "Degrees"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "B-Axis", 
                "signed_value": true, 
                "unit": "Degrees"
            }
        ], 
        "created_date": "2019-12-18 10:00:31", 
        "csv_filename": "Geokon-IPI", 
        "description": "MEMS Digital Addressable In-Place Inclinometer model 6150E", 
        "manufacturer": "Geokon", 
        "max_allowed_sensors": 50, 
        "sensor_model": "In-Place Inclinometer"
    }, 
    {
        "cfg_id": "1", 
        "cfg_parameters": {
            "baudrate": 115200, 
            "databits": 8, 
            "global_instructions": "0041F4058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 11, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 2000, 
            "word_swap": false
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = floor(((1 / (1.128706256 * 10^-3 + 2.342327483 * 10^-4 * ln(x) + 0.8707279757 * 10^-7 * ln(x)^3)) -273.15) * 100) / 100", 
                "conversion_func_python": "lambda x : math.floor(((1 / (1.128706256 * math.pow(10,-3) + 2.342327483 * math.pow(10,-4) * math.log(x) + 0.8707279757 * math.pow(10,-7) * math.pow(math.log(x),3))) -273.15) * 100) / 100", 
                "data_conversion": true, 
                "data_size": 17, 
                "label": "Temp", 
                "signed_value": false, 
                "unit": "\u00b0C"
            }
        ], 
        "created_date": "2019-12-13 11:22:38", 
        "csv_filename": "Geokon-Thermistor", 
        "description": "Addressable Thermistor String model 3810A", 
        "manufacturer": "Geokon", 
        "max_allowed_sensors": 50, 
        "sensor_model": "Thermistor String"
    }, 
    {
        "cfg_id": "2", 
        "cfg_parameters": {
            "baudrate": 19200, 
            "databits": 8, 
            "global_instructions": "004019058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 16, 
            "parity": 1, 
            "sensor_instructions": "031002501111E800003855014003D090020010BA8062005A0220900000070A8037FFFFF9C050020080C8020010B9600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
            "stopbits": 1, 
            "timeout": 5000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Pressure", 
                "signed_value": false, 
                "unit": "Psi"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }
        ], 
        "created_date": "2020-02-21 14:50:23", 
        "csv_filename": "InSitu-LevelBaroTroll", 
        "description": "Water level datalogger", 
        "manufacturer": "In-Situ", 
        "max_allowed_sensors": 6, 
        "sensor_model": "Level/Baro TROLL"
    }, 
    {
        "cfg_id": "3", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "00404B058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 20, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 5000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10000.0)", 
                "conversion_func_python": "lambda x : (x / 10000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Pressure", 
                "signed_value": false, 
                "unit": "Bar"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }
        ], 
        "created_date": "2020-03-05 16:13:34", 
        "csv_filename": "Keller-PR36XW", 
        "description": "Level sensor PR-36XW", 
        "manufacturer": "Keller", 
        "max_allowed_sensors": 6, 
        "sensor_model": "PR-36XW"
    }, 
    {
        "cfg_id": "4", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "0045DC058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 29, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 5000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10000.0)", 
                "conversion_func_python": "lambda x : (x / 10000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Pressure", 
                "signed_value": false, 
                "unit": "Bar"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Conductivity", 
                "signed_value": false, 
                "unit": "mS/cm"
            }
        ], 
        "created_date": "2020-03-11 18:10:55", 
        "csv_filename": "Keller-PR36XiWCTD", 
        "description": "Level sensor with conductivity", 
        "manufacturer": "Keller", 
        "max_allowed_sensors": 6, 
        "sensor_model": "PR-36XiW CTD"
    }, 
    {
        "cfg_id": "5", 
        "cfg_parameters": {
            "baudrate": 19200, 
            "databits": 8, 
            "global_instructions": "004019058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 98, 
            "parity": 1, 
            "sensor_instructions": "03A000F008BB8020010041770140085CF03A0010008BB8020010041770140085CF03A0011008BB8020010041770140085CF03A002000809602001005FC18140085CB03A002100809602001005FC18140085CB03A002200809602001005FC18140085CB03A000B0080FA020010040000140085CB03A000C0080FA020010040000140085CB03A000D0080FA020010040000140085CB03A0013008383C20010040000140085CD03A0014008383C20010040000140085CD03A0015008383C20010040000140085CD03A002B0080BB820010040000140085CB03A002C0080BB820010040000140085CB03A002D0080BB820010040000140085CB0360030007FFE820010BA006C0062009388040021738000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
            "stopbits": 1, 
            "timeout": 10000, 
            "word_swap": false
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "MinPress", 
                "signed_value": true, 
                "unit": "hPa"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "MaxPress", 
                "signed_value": true, 
                "unit": "hPa"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "AvgPress", 
                "signed_value": true, 
                "unit": "hPa"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "MinTemp", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 5, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "MaxTemp", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 6, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "AvgTemp", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 7, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "MinRH", 
                "signed_value": true, 
                "unit": "%RH"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 8, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "MaxRH", 
                "signed_value": true, 
                "unit": "%RH"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 9, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "AvgRH", 
                "signed_value": true, 
                "unit": "%RH"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 10, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 13, 
                "label": "MinWindDirec", 
                "signed_value": true, 
                "unit": "Deg"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 11, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 13, 
                "label": "MaxWindDirec", 
                "signed_value": true, 
                "unit": "Deg"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 12, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 13, 
                "label": "AvgWindDirec", 
                "signed_value": true, 
                "unit": "Deg"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 13, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "MinWindSpeed", 
                "signed_value": true, 
                "unit": "m/s"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 14, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "MaxWindSpeed", 
                "signed_value": true, 
                "unit": "m/s"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 15, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "AvgWindSpeed", 
                "signed_value": true, 
                "unit": "m/s"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 16, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "RainAccAbs", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 17, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 14, 
                "label": "RainAccDiff", 
                "signed_value": false, 
                "unit": "mm"
            }
        ], 
        "created_date": "2020-07-23 11:33:16", 
        "csv_filename": "Vaisala-WXT536", 
        "description": "Weather Transmitter", 
        "manufacturer": "Vaisala", 
        "max_allowed_sensors": 6, 
        "sensor_model": "WXT536"
    }, 
    {
        "cfg_id": "6", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "0049C4058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 32, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 5000, 
            "word_swap": false
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 1000000.0)", 
                "conversion_func_python": "lambda x : (x / 1000000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "A-Axis", 
                "signed_value": true, 
                "unit": "sin"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 1000000.0)", 
                "conversion_func_python": "lambda x : (x / 1000000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "B-Axis", 
                "signed_value": true, 
                "unit": "sin"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 14, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00baC"
            }
        ], 
        "created_date": "2020-10-26 10:25:02", 
        "csv_filename": "RST-Modbus", 
        "description": "RST Modbus (SN 70000 onwards)", 
        "manufacturer": "RST", 
        "max_allowed_sensors": 50, 
        "sensor_model": "Modbus - SN >70000"
    }, 
    {
        "cfg_id": "7", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "004BB8058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 18, 
            "parity": 1, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 5000, 
            "word_swap": false
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 1000.000)", 
                "conversion_func_python": "lambda x : (x / 1000.000)", 
                "data_conversion": true, 
                "data_size": 18, 
                "label": "Pressure", 
                "signed_value": true, 
                "unit": "mbar"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "C"
            }
        ], 
        "created_date": "2021-09-17 10:30:20", 
        "csv_filename": "PC-HSD4-V2", 
        "description": "Hydrostatic altitude sensor", 
        "manufacturer": "Position Control", 
        "max_allowed_sensors": 30, 
        "sensor_model": "PC-HSD4 V2"
    }, 
    {
        "cfg_id": "8", 
        "cfg_parameters": {
            "baudrate": 19200, 
            "databits": 8, 
            "global_instructions": "004019058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 25, 
            "parity": 1, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 5000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "Pressure", 
                "signed_value": true, 
                "unit": "PSI"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "SpecConductivity", 
                "signed_value": false, 
                "unit": "\u03bcS/cm"
            }
        ], 
        "created_date": "2021-09-16 17:51:26", 
        "csv_filename": "InSitu-AquaTroll200", 
        "description": "Conductivity and water level logger", 
        "manufacturer": "In-Situ", 
        "max_allowed_sensors": 6, 
        "sensor_model": "Aqua TROLL 200"
    }, 
    {
        "cfg_id": "9", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "004019058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 62, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 25000, 
            "word_swap": false
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 12, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 1", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 2", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 3", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 5, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 4", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 6, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 5", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 7, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 6", 
                "signed_value": false, 
                "unit": "mm"
            }
        ], 
        "created_date": "2021-10-25 16:40:11", 
        "csv_filename": "YieldPoint-d6EXTO", 
        "description": "YieldPoint up to 6 anchors extensometer", 
        "manufacturer": "YieldPoint", 
        "max_allowed_sensors": 16, 
        "sensor_model": "Modbus d6EXTO"
    }, 
    {
        "cfg_id": "10", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "004019058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 134, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 25000, 
            "word_swap": false
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 12, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 1", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 2", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 3", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 5, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 4", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 6, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 5", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 7, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 6", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 8, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 7", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 9, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 8", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 10, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 9", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 11, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 10", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 12, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 11", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 13, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 12", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 14, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 13", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 15, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 14", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 16, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Anchor 15", 
                "signed_value": false, 
                "unit": "mm"
            }
        ], 
        "created_date": "2021-10-25 16:41:46", 
        "csv_filename": "YieldPoint-d15EXTO", 
        "description": "YieldPoint up to 15 anchors extensometer", 
        "manufacturer": "YieldPoint", 
        "max_allowed_sensors": 10, 
        "sensor_model": "Modbus d15EXTO"
    }, 
    {
        "cfg_id": "11", 
        "cfg_parameters": {
            "baudrate": 115200, 
            "databits": 8, 
            "global_instructions": "00407D058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 36, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 4000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 100000.0)", 
                "conversion_func_python": "lambda x : (x / 100000.0)", 
                "data_conversion": true, 
                "data_size": 18, 
                "label": "X-Axis", 
                "signed_value": true, 
                "unit": "sin"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 100000.0)", 
                "conversion_func_python": "lambda x : (x / 100000.0)", 
                "data_conversion": true, 
                "data_size": 18, 
                "label": "Y-Axis", 
                "signed_value": true, 
                "unit": "sin"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 100000.0)", 
                "conversion_func_python": "lambda x : (x / 100000.0)", 
                "data_conversion": true, 
                "data_size": 18, 
                "label": "Z-Axis", 
                "signed_value": true, 
                "unit": "sin"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00baC"
            }
        ], 
        "created_date": "2021-11-30 15:16:58", 
        "csv_filename": "Encardio-EAN-56", 
        "description": "In-Place Inclinometer", 
        "manufacturer": "Encardio", 
        "max_allowed_sensors": 32, 
        "sensor_model": "EAN-56"
    }, 
    {
        "cfg_id": "12", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "00401F458000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 37, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 6000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 5, 
                "label": "Status", 
                "signed_value": false, 
                "unit": "code"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Distance", 
                "signed_value": true, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 12, 
                "label": "Voltage", 
                "signed_value": false, 
                "unit": "V"
            }
        ], 
        "created_date": "2022-06-07 16:28:09", 
        "csv_filename": "Osprey-IPX-08", 
        "description": "In-Place Magnetic Extensometer", 
        "manufacturer": "Osprey", 
        "max_allowed_sensors": 50, 
        "sensor_model": "IPX-08"
    }, 
    {
        "cfg_id": "13", 
        "cfg_parameters": {
            "baudrate": 115200, 
            "databits": 8, 
            "global_instructions": "004177058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 43, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 5000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 1000000.000000)", 
                "conversion_func_python": "lambda x : (x / 1000000.000000)", 
                "data_conversion": true, 
                "data_size": 21, 
                "label": "A-axis", 
                "signed_value": true, 
                "unit": "sin(x)"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 1000000.000000)", 
                "conversion_func_python": "lambda x : (x / 1000000.000000)", 
                "data_conversion": true, 
                "data_size": 21, 
                "label": "B-axis", 
                "signed_value": true, 
                "unit": "sin(x)"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 100.00)", 
                "conversion_func_python": "lambda x : (x / 100.00)", 
                "data_conversion": true, 
                "data_size": 15, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }
        ], 
        "created_date": "2022-05-04 08:31:56", 
        "csv_filename": "Geosense-Modbus-Biaxial-IPI", 
        "description": "Geosense Modbus RTU, Biaxial In-Place Inclinometer", 
        "manufacturer": "Geosense", 
        "max_allowed_sensors": 50, 
        "sensor_model": "Modbus Biaxial IPI"
    }, 
    {
        "cfg_id": "14", 
        "cfg_parameters": {
            "baudrate": 115200, 
            "databits": 8, 
            "global_instructions": "0045DC058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 22, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 8000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": false, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "Anchor 1", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "Anchor 2", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "Anchor 3", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "Anchor 4", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 5, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "Anchor 5", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 6, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 16, 
                "label": "Anchor 6", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 7, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 24, 
                "label": "SN", 
                "signed_value": false, 
                "unit": ""
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 8, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 20, 
                "label": "Site Code", 
                "signed_value": false, 
                "unit": ""
            }
        ], 
        "created_date": "2023-03-28 11:30:38", 
        "csv_filename": "MDT-DIG4", 
        "description": "MDT custom DIG hw to support up to 4 extensometers with Modbus", 
        "manufacturer": "MDT", 
        "max_allowed_sensors": 20, 
        "sensor_model": "DIG4 Modbus"
    }, 
    {
        "cfg_id": "15", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "0044E2058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 26, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 10000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": false, 
                "chn_num": 1, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 32, 
                "label": "P0", 
                "signed_value": false, 
                "unit": "digits"
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 2, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 32, 
                "label": "P1", 
                "signed_value": false, 
                "unit": "digits"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 17, 
                "label": "Calibration Load", 
                "signed_value": false, 
                "unit": "kN"
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 4, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 32, 
                "label": "Serial Number", 
                "signed_value": false, 
                "unit": ""
            }, 
            {
                "check_out_of_range": false, 
                "chn_num": 5, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 32, 
                "label": "ADC Raw", 
                "signed_value": false, 
                "unit": "digits"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 6, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 17, 
                "label": "Force Integer", 
                "signed_value": false, 
                "unit": "kN"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 7, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }
        ], 
        "created_date": "2022-08-05 10:11:48", 
        "csv_filename": "Bauer-LoadCellExtended", 
        "description": "Bauer Load Cell Modbus RTU Interface", 
        "manufacturer": "Bauer", 
        "max_allowed_sensors": 10, 
        "sensor_model": "Load Cell (extended)"
    }, 
    {
        "cfg_id": "16", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "0044E2058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 16, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 10000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": false, 
                "chn_num": 1, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 32, 
                "label": "Serial Number", 
                "signed_value": false, 
                "unit": ""
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "", 
                "conversion_func_python": "", 
                "data_conversion": false, 
                "data_size": 17, 
                "label": "Force Integer", 
                "signed_value": false, 
                "unit": "kN"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00b0C"
            }
        ], 
        "created_date": "2022-08-05 10:12:12", 
        "csv_filename": "Bauer-LoadCellBasic", 
        "description": "Bauer Load Cell Modbus RTU Interface", 
        "manufacturer": "Bauer", 
        "max_allowed_sensors": 30, 
        "sensor_model": "Load Cell (basic)"
    }, 
    {
        "cfg_id": "17", 
        "cfg_parameters": {
            "baudrate": 115200, 
            "databits": 8, 
            "global_instructions": "0042EE058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 123, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 20000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Load Cell Temp", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 100.0)", 
                "conversion_func_python": "lambda x : (x / 100.0)", 
                "data_conversion": true, 
                "data_size": 18, 
                "label": "Load Cell Ch1", 
                "signed_value": false, 
                "unit": "kN"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Mexid Temp", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Mexid Ch1", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 5, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Mexid Ch2", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 6, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Mexid Ch3", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 7, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Mexid Ch4", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 8, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Mexid Ch5", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 9, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Mexid Ch6", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 10, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "Mexid Ch7", 
                "signed_value": false, 
                "unit": "mm"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 11, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Rebar-D Temp", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 12, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Rebar-D Ch1", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 13, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Rebar-D Ch2", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 14, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Rebar-D Ch3", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 15, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Rebar-D Ch4", 
                "signed_value": true, 
                "unit": "mV"
            }
        ], 
        "created_date": "2022-11-29 16:16:28", 
        "csv_filename": "Geosinergia-biModbus", 
        "description": "Load cell + Extensometer + Perno", 
        "manufacturer": "Geosinergia", 
        "max_allowed_sensors": 10, 
        "sensor_model": "biModbus"
    }, 
    {
        "cfg_id": "18", 
        "cfg_parameters": {
            "baudrate": 115200, 
            "databits": 8, 
            "global_instructions": "0042EE058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 130, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 20000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG1", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG2", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG3", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 5, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG4", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 6, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG5", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 7, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG6", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 8, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG7", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 9, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG8", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 10, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG9", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 11, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG10", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 12, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG11", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 13, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "SG12", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 14, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 14, 
                "label": "VCC", 
                "signed_value": true, 
                "unit": "mV"
            }
        ], 
        "created_date": "2022-12-22 08:57:05", 
        "csv_filename": "Geosinergia-LoggerHI", 
        "description": "Geosinergia - Logger HI", 
        "manufacturer": "Geosinergia", 
        "max_allowed_sensors": 10, 
        "sensor_model": "Logger HI"
    }, 
    {
        "cfg_id": "19", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "0042EE058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 49, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 20000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temperature", 
                "signed_value": true, 
                "unit": "\u00baC"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Ch1", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Ch2", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 4, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Ch3", 
                "signed_value": true, 
                "unit": "mV"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 5, 
                "conversion_func_android": "func (x) = (x / 1000.0)", 
                "conversion_func_python": "lambda x : (x / 1000.0)", 
                "data_conversion": true, 
                "data_size": 19, 
                "label": "Ch4", 
                "signed_value": true, 
                "unit": "mV"
            }
        ], 
        "created_date": "2022-11-28 13:02:41", 
        "csv_filename": "Geosinergia-RebarD", 
        "description": "Geosinergia - Rebar-D", 
        "manufacturer": "Geosinergia", 
        "max_allowed_sensors": 30, 
        "sensor_model": "Rebar-D"
    }, 
    {
        "cfg_id": "20", 
        "cfg_parameters": {
            "baudrate": 9600, 
            "databits": 8, 
            "global_instructions": "0047D0058000000000000000000000", 
            "instructions_version": 0, 
            "number_global_instructions": 2, 
            "number_sensor_instructions": 35, 
            "parity": 0, 
            "sensor_instructions
            "stopbits": 1, 
            "timeout": 10000, 
            "word_swap": true
        }, 
        "cfg_version": 0, 
        "channels": [
            {
                "check_out_of_range": true, 
                "chn_num": 1, 
                "conversion_func_android": "func (x) = (x / 1000000.0)", 
                "conversion_func_python": "lambda x : (x / 1000000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "A-Axis", 
                "signed_value": true, 
                "unit": "sin"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 2, 
                "conversion_func_android": "func (x) = (x / 1000000.0)", 
                "conversion_func_python": "lambda x : (x / 1000000.0)", 
                "data_conversion": true, 
                "data_size": 20, 
                "label": "B-Axis", 
                "signed_value": true, 
                "unit": "sin"
            }, 
            {
                "check_out_of_range": true, 
                "chn_num": 3, 
                "conversion_func_android": "func (x) = (x / 10.0)", 
                "conversion_func_python": "lambda x : (x / 10.0)", 
                "data_conversion": true, 
                "data_size": 11, 
                "label": "Temp", 
                "signed_value": true, 
                "unit": "\u00baC"
            }
        ], 
        "created_date": "2023-03-17 09:39:25", 
        "csv_filename": "Sisgeo-Inclinometers", 
        "description": "Up to 50 inclinometers with sin(x) units and timed mode", 
        "manufacturer": "Sisgeo", 
        "max_allowed_sensors": 50, 
        "sensor_model": "Inclinometers sin(x) up to 50 (Modbus RTU)"
    }
]
